var searchIndex = {};
searchIndex['dataflow_join'] = {"items":[[0,"","dataflow_join","",null,null],[3,"TypedMemoryMap","","",null,null],[0,"graph","","",null,null],[3,"GraphVector","dataflow_join::graph","",null,null],[12,"nodes","","",0,null],[12,"edges","","",0,null],[3,"GraphMMap","","",null,null],[3,"GraphExtender","","",null,null],[5,"gallop","","",null,null],[8,"GraphExtenderExt","","",null,null],[10,"extend_using","","",1,{"inputs":[{"name":"graphextenderext"},{"name":"l"}],"output":{"name":"rc"}}],[8,"GraphTrait","","",null,null],[16,"Target","","",2,null],[10,"nodes","","",2,{"inputs":[{"name":"graphtrait"}],"output":{"name":"usize"}}],[10,"edges","","",2,null],[11,"extend_using","alloc::rc","",3,{"inputs":[{"name":"rc"},{"name":"l"}],"output":{"name":"rc"}}],[11,"nodes","dataflow_join::graph","",0,{"inputs":[{"name":"graphvector"}],"output":{"name":"usize"}}],[11,"edges","","",0,null],[11,"new","","",4,{"inputs":[{"name":"graphmmap"},{"name":"str"}],"output":{"name":"graphmmap"}}],[11,"nodes","","",4,{"inputs":[{"name":"graphmmap"}],"output":{"name":"usize"}}],[11,"edges","","",4,null],[11,"logic","","",5,{"inputs":[{"name":"graphextender"}],"output":{"name":"rc"}}],[11,"count","","",5,{"inputs":[{"name":"graphextender"},{"name":"p"}],"output":{"name":"u64"}}],[11,"propose","","",5,{"inputs":[{"name":"graphextender"},{"name":"p"},{"name":"vec"}],"output":null}],[11,"intersect","","",5,{"inputs":[{"name":"graphextender"},{"name":"p"},{"name":"vec"}],"output":null}],[11,"new","dataflow_join","",6,{"inputs":[{"name":"typedmemorymap"},{"name":"string"}],"output":{"name":"typedmemorymap"}}],[11,"index","","",6,null],[8,"PrefixExtender","","",null,null],[16,"Prefix","","",7,null],[16,"Extension","","",7,null],[10,"count","","",7,{"inputs":[{"name":"prefixextender"},{"name":"prefix"}],"output":{"name":"u64"}}],[10,"propose","","",7,{"inputs":[{"name":"prefixextender"},{"name":"prefix"},{"name":"vec"}],"output":null}],[10,"intersect","","",7,{"inputs":[{"name":"prefixextender"},{"name":"prefix"},{"name":"vec"}],"output":null}],[16,"RoutingFunction","","",7,null],[10,"logic","","",7,{"inputs":[{"name":"prefixextender"}],"output":{"name":"rc"}}],[8,"StreamPrefixExtender","","",null,null],[16,"Prefix","","",8,null],[16,"Extension","","",8,null],[10,"count","","",8,{"inputs":[{"name":"streamprefixextender"},{"name":"stream"},{"name":"u64"}],"output":{"name":"stream"}}],[10,"propose","","",8,{"inputs":[{"name":"streamprefixextender"},{"name":"stream"}],"output":{"name":"stream"}}],[10,"intersect","","",8,{"inputs":[{"name":"streamprefixextender"},{"name":"stream"}],"output":{"name":"stream"}}],[8,"GenericJoinExt","","",null,null],[10,"extend","","",9,{"inputs":[{"name":"genericjoinext"},{"name":"vec"}],"output":{"name":"stream"}}],[11,"count","alloc::rc","",3,{"inputs":[{"name":"rc"},{"name":"stream"},{"name":"u64"}],"output":{"name":"stream"}}],[11,"propose","","",3,{"inputs":[{"name":"rc"},{"name":"stream"}],"output":{"name":"stream"}}],[11,"intersect","","",3,{"inputs":[{"name":"rc"},{"name":"stream"}],"output":{"name":"stream"}}],[11,"extend","timely::dataflow::stream","",10,{"inputs":[{"name":"stream"},{"name":"vec"}],"output":{"name":"stream"}}]],"paths":[[3,"GraphVector"],[8,"GraphExtenderExt"],[8,"GraphTrait"],[3,"Rc"],[3,"GraphMMap"],[3,"GraphExtender"],[3,"TypedMemoryMap"],[8,"PrefixExtender"],[8,"StreamPrefixExtender"],[8,"GenericJoinExt"],[3,"Stream"]]};
searchIndex['timely'] = {"items":[[0,"","timely","Timely dataflow is framework for managing and executing data-parallel dataflow computations.",null,null],[8,"Push","","Pushing elements of type `T`.",null,null],[10,"push","","Pushes `element` with the opportunity to take ownership.",0,null],[11,"send","","Pushes `element` and drops any resulting resources.",0,null],[11,"done","","Pushes `None`, conventionally signalling a flush.",0,null],[8,"Pull","","Pulling elements of type `T`.",null,null],[10,"pull","","Pulls an element with the opportunity to take ownership.",1,{"inputs":[{"name":"pull"}],"output":{"name":"option"}}],[11,"recv","","Takes an `Option<T>` and leaves `None` behind.",1,{"inputs":[{"name":"pull"}],"output":{"name":"option"}}],[11,"from_args","timely_communication::initialize","Constructs a new configuration by parsing supplied text arguments.",2,{"inputs":[{"name":"configuration"},{"name":"i"}],"output":{"name":"option"}}],[11,"index","timely_communication::allocator::thread","",3,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"peers","","",3,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"allocate","","",3,null],[11,"push","","",4,null],[11,"pull","","",5,{"inputs":[{"name":"puller"}],"output":{"name":"option"}}],[11,"inner","timely_communication::allocator::process","",6,{"inputs":[{"name":"process"}],"output":{"name":"thread"}}],[11,"new_vector","","",6,{"inputs":[{"name":"process"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"index","","",6,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[11,"peers","","",6,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[11,"allocate","","",6,null],[11,"clone","","",7,{"inputs":[{"name":"pusher"}],"output":{"name":"pusher"}}],[11,"push","","",7,null],[11,"pull","","",8,{"inputs":[{"name":"puller"}],"output":{"name":"option"}}],[11,"inner","timely_communication::allocator::binary","",9,{"inputs":[{"name":"binary"}],"output":{"name":"process"}}],[11,"index","","",9,{"inputs":[{"name":"binary"}],"output":{"name":"usize"}}],[11,"peers","","",9,{"inputs":[{"name":"binary"}],"output":{"name":"usize"}}],[11,"allocate","","",9,null],[11,"new","","",10,{"inputs":[{"name":"pusher"},{"name":"messageheader"},{"name":"sender"}],"output":{"name":"pusher"}}],[11,"push","","",10,null],[11,"pull","","",11,{"inputs":[{"name":"puller"}],"output":{"name":"option"}}],[11,"index","timely_communication::allocator::generic","The index of the worker out of `(0..self.peers())`.",12,{"inputs":[{"name":"generic"}],"output":{"name":"usize"}}],[11,"peers","","The number of workers.",12,{"inputs":[{"name":"generic"}],"output":{"name":"usize"}}],[11,"allocate","","Constructs several send endpoints and one receive endpoint.",12,null],[11,"index","","",12,{"inputs":[{"name":"generic"}],"output":{"name":"usize"}}],[11,"peers","","",12,{"inputs":[{"name":"generic"}],"output":{"name":"usize"}}],[11,"allocate","","",12,null],[11,"clone","timely_communication::networking","",13,{"inputs":[{"name":"messageheader"}],"output":{"name":"messageheader"}}],[11,"new","","",14,{"inputs":[{"name":"switchboard"},{"name":"receiver"}],"output":{"name":"switchboard"}}],[11,"ensure","","",14,{"inputs":[{"name":"switchboard"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"drain_temp","collections::vec","",15,{"inputs":[{"name":"vec"}],"output":{"name":"drain"}}],[11,"next","timely_communication::drain","",16,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"drop","","",16,null],[11,"push","alloc::boxed","",17,null],[11,"pull","","",17,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[4,"Configuration","timely","",null,null],[13,"Thread","","",2,null],[13,"Process","","",2,null],[13,"Cluster","","",2,null],[0,"progress","","Progress tracking mechanisms to support notification in timely dataflow",null,null],[0,"count_map","timely::progress","A mapping from general types `T` to `i64`, with zero values absent.",null,null],[3,"CountMap","timely::progress::count_map","",null,null],[12,"updates","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"countmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"countmap"}],"output":{"name":"countmap"}}],[11,"default","","",18,{"inputs":[{"name":"countmap"}],"output":{"name":"countmap"}}],[11,"update","","",18,{"inputs":[{"name":"countmap"},{"name":"t"},{"name":"i64"}],"output":{"name":"i64"}}],[11,"elements","","",18,{"inputs":[{"name":"countmap"}],"output":{"name":"vec"}}],[11,"clear","","",18,{"inputs":[{"name":"countmap"}],"output":null}],[11,"len","","",18,{"inputs":[{"name":"countmap"}],"output":{"name":"usize"}}],[11,"pop","","",18,{"inputs":[{"name":"countmap"}],"output":{"name":"option"}}],[11,"new","","",18,{"inputs":[{"name":"countmap"}],"output":{"name":"countmap"}}],[11,"new_from","","",18,{"inputs":[{"name":"countmap"},{"name":"t"},{"name":"i64"}],"output":{"name":"countmap"}}],[11,"drain_into","","",18,{"inputs":[{"name":"countmap"},{"name":"countmap"}],"output":null}],[11,"extend","","",18,{"inputs":[{"name":"countmap"},{"name":"i"}],"output":null}],[0,"frontier","timely::progress","Tracks minimal sets of mutually incomparable elements of a partial order.",null,null],[3,"Antichain","timely::progress::frontier","A set of mutually incomparable elements.",null,null],[3,"MutableAntichain","","An antichain based on a multiset whose elements frequencies can be updated.",null,null],[11,"fmt","","",19,{"inputs":[{"name":"antichain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"antichain"}],"output":{"name":"antichain"}}],[11,"default","","",19,{"inputs":[{"name":"antichain"}],"output":{"name":"antichain"}}],[11,"insert","","Updates the `Antichain` if the element is not greater than or equal to some present element.",19,{"inputs":[{"name":"antichain"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `Antichain`.",19,{"inputs":[{"name":"antichain"}],"output":{"name":"antichain"}}],[11,"from_elem","","Creates a new singleton `Antichain`.",19,{"inputs":[{"name":"antichain"},{"name":"t"}],"output":{"name":"antichain"}}],[11,"elements","","Reveals the elements in the `Antichain`.",19,null],[11,"clone","","",20,{"inputs":[{"name":"mutableantichain"}],"output":{"name":"mutableantichain"}}],[11,"fmt","","",20,{"inputs":[{"name":"mutableantichain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[{"name":"mutableantichain"}],"output":{"name":"mutableantichain"}}],[11,"new","","Creates a new empty `MutableAntichain`.",20,{"inputs":[{"name":"mutableantichain"}],"output":{"name":"mutableantichain"}}],[11,"elements","","Reveals the element in the `MutableAntichain`.",20,null],[11,"new_bottom","","Creates a new singleton `MutableAntichain`.",20,{"inputs":[{"name":"mutableantichain"},{"name":"t"}],"output":{"name":"mutableantichain"}}],[11,"empty","","Returns true if there are no elements in the `MutableAntichain`.",20,{"inputs":[{"name":"mutableantichain"}],"output":{"name":"bool"}}],[11,"lt","","Returns true if any item in the `MutableAntichain` is strictly less than the argument.",20,{"inputs":[{"name":"mutableantichain"},{"name":"t"}],"output":{"name":"bool"}}],[11,"le","","Returns true if any item in the `MutableAntichain` is less than or equal to the argument.",20,{"inputs":[{"name":"mutableantichain"},{"name":"t"}],"output":{"name":"bool"}}],[11,"count","","Returns the number of times an element exists in the set.",20,{"inputs":[{"name":"mutableantichain"},{"name":"t"}],"output":{"name":"option"}}],[11,"update_into_cm","","",20,null],[11,"update_weight","","",20,null],[11,"update","","",20,{"inputs":[{"name":"mutableantichain"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"update_iter_and","","",20,null],[11,"test_size","","",20,{"inputs":[{"name":"mutableantichain"},{"name":"usize"},{"name":"str"}],"output":null}],[11,"update_and","","",20,null],[0,"nested","timely::progress","Coordination of progress information between a scope-as-operator and its children operators.",null,null],[0,"pointstamp_counter","timely::progress::nested","Manages pointstamp counts (timestamp, location) within a sub operator.",null,null],[3,"PointstampCounter","timely::progress::nested::pointstamp_counter","",null,null],[12,"source_counts","","",21,null],[12,"target_counts","","",21,null],[12,"input_counts","","",21,null],[12,"target_pushed","","",21,null],[12,"output_pushed","","",21,null],[11,"default","","",21,{"inputs":[{"name":"pointstampcounter"}],"output":{"name":"pointstampcounter"}}],[11,"update_target","","",21,{"inputs":[{"name":"pointstampcounter"},{"name":"target"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"update_source","","",21,{"inputs":[{"name":"pointstampcounter"},{"name":"source"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"clear_pushed","","",21,{"inputs":[{"name":"pointstampcounter"}],"output":null}],[0,"scope_wrapper","timely::progress::nested","Wraps a child operator, and mediates the communication of progress information.",null,null],[3,"ScopeWrapper","timely::progress::nested::scope_wrapper","",null,null],[12,"name","","",22,null],[12,"scope","","",22,null],[12,"inputs","","",22,null],[12,"outputs","","",22,null],[12,"edges","","",22,null],[12,"notify","","",22,null],[12,"summary","","",22,null],[12,"guarantees","","",22,null],[12,"capabilities","","",22,null],[12,"outstanding_messages","","",22,null],[12,"guarantee_changes","","",22,null],[11,"new","","",22,{"inputs":[{"name":"scopewrapper"},{"name":"box"},{"name":"usize"},{"name":"string"}],"output":{"name":"scopewrapper"}}],[11,"set_external_summary","","",22,null],[11,"push_pointstamps","","",22,null],[11,"pull_pointstamps","","",22,{"inputs":[{"name":"scopewrapper"},{"name":"countmap"},{"name":"countmap"},{"name":"a"}],"output":{"name":"bool"}}],[11,"add_edge","","",22,{"inputs":[{"name":"scopewrapper"},{"name":"usize"},{"name":"target"}],"output":null}],[11,"name","","",22,{"inputs":[{"name":"scopewrapper"}],"output":{"name":"string"}}],[0,"summary","timely::progress::nested","Path summaries that are either child local, or leave the scope and re-enter from the parent.",null,null],[4,"Summary","timely::progress::nested::summary","",null,null],[13,"Local","","",23,null],[13,"Outer","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"summary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"summary"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"summary"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"summary"}],"output":{"name":"summary"}}],[11,"default","","",23,{"inputs":[{"name":"summary"}],"output":{"name":"summary"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"summary"},{"name":"summary"}],"output":{"name":"option"}}],[11,"results_in","","",23,{"inputs":[{"name":"summary"},{"name":"product"}],"output":{"name":"product"}}],[11,"followed_by","","",23,{"inputs":[{"name":"summary"},{"name":"summary"}],"output":{"name":"summary"}}],[11,"fmt","","",23,{"inputs":[{"name":"summary"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"product","timely::progress::nested","A pair timestamp suitable for use with the product partial order.",null,null],[3,"Product","timely::progress::nested::product","We use `Product` rather than `(TOuter, TInner)`` so that we can derive our own `PartialOrd`,\nbecause Rust just uses the lexicographic total order.",null,null],[12,"outer","","",24,null],[12,"inner","","",24,null],[11,"default","","",24,{"inputs":[{"name":"product"}],"output":{"name":"product"}}],[11,"eq","","",24,{"inputs":[{"name":"product"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"product"},{"name":"product"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"clone","","",24,{"inputs":[{"name":"product"}],"output":{"name":"product"}}],[11,"new","","",24,{"inputs":[{"name":"product"},{"name":"touter"},{"name":"tinner"}],"output":{"name":"product"}}],[11,"fmt","","",24,{"inputs":[{"name":"product"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"product"},{"name":"product"}],"output":{"name":"option"}}],[11,"le","","",24,{"inputs":[{"name":"product"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"product"},{"name":"product"}],"output":{"name":"bool"}}],[11,"embalm","","",24,{"inputs":[{"name":"product"}],"output":null}],[11,"entomb","","",24,{"inputs":[{"name":"product"},{"name":"vec"}],"output":null}],[11,"exhume","","",24,null],[11,"verify","","",24,null],[0,"subgraph","timely::progress::nested","Implements `Operate` for a scoped collection of child operators.",null,null],[3,"Subgraph","timely::progress::nested::subgraph","",null,null],[12,"name","","",25,null],[12,"path","","",25,null],[12,"index","","",25,null],[12,"external_capability","","",25,null],[12,"external_guarantee","","",25,null],[12,"children","","",25,null],[12,"input_messages","","",25,null],[4,"Source","","",null,null],[13,"GraphInput","","",26,null],[13,"ChildOutput","","",26,null],[4,"Target","","",null,null],[13,"GraphOutput","","",27,null],[13,"ChildInput","","",27,null],[11,"fmt","","",26,{"inputs":[{"name":"source"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"source"}],"output":{"name":"source"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"source"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"source"},{"name":"source"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"target"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"target"}],"output":{"name":"target"}}],[11,"hash","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"target"},{"name":"target"}],"output":{"name":"bool"}}],[11,"name","","",25,{"inputs":[{"name":"subgraph"}],"output":{"name":"str"}}],[11,"inputs","","",25,{"inputs":[{"name":"subgraph"}],"output":{"name":"usize"}}],[11,"outputs","","",25,{"inputs":[{"name":"subgraph"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","",25,null],[11,"set_external_summary","","",25,null],[11,"push_external_progress","","",25,null],[11,"pull_internal_progress","","",25,null],[11,"children","","",25,{"inputs":[{"name":"subgraph"}],"output":{"name":"usize"}}],[11,"new_input","","",25,{"inputs":[{"name":"subgraph"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"new_output","","",25,{"inputs":[{"name":"subgraph"}],"output":{"name":"usize"}}],[11,"connect","","",25,{"inputs":[{"name":"subgraph"},{"name":"source"},{"name":"target"}],"output":null}],[11,"new_from","","",25,{"inputs":[{"name":"subgraph"},{"name":"a"},{"name":"usize"},{"name":"string"}],"output":{"name":"subgraph"}}],[0,"timestamp","timely::progress","A partially ordered measure of progress at each timely dataflow location.",null,null],[3,"RootTimestamp","timely::progress::timestamp","An empty timestamp used by the root scope.",null,null],[3,"RootSummary","","An empty path summary for root timestamps.",null,null],[8,"Timestamp","","A composite trait for types that serve as timestamps in timely dataflow.",null,null],[16,"Summary","","",28,null],[8,"PathSummary","","A summary of how a timestamp advances along a timely dataflow path.",null,null],[10,"results_in","","Advances a timestamp according to the timestamp actions on the path.",29,{"inputs":[{"name":"pathsummary"},{"name":"t"}],"output":{"name":"t"}}],[10,"followed_by","","Composes this path summary with another path summary.",29,{"inputs":[{"name":"pathsummary"},{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",30,{"inputs":[{"name":"roottimestamp"}],"output":{"name":"roottimestamp"}}],[11,"eq","","",30,{"inputs":[{"name":"roottimestamp"},{"name":"roottimestamp"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"roottimestamp"},{"name":"roottimestamp"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"roottimestamp"},{"name":"roottimestamp"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"roottimestamp"},{"name":"roottimestamp"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"roottimestamp"},{"name":"roottimestamp"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"roottimestamp"},{"name":"roottimestamp"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"roottimestamp"},{"name":"roottimestamp"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"roottimestamp"}],"output":{"name":"roottimestamp"}}],[11,"fmt","","",30,{"inputs":[{"name":"roottimestamp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Product<RootTimestamp,T>`.",30,{"inputs":[{"name":"roottimestamp"},{"name":"t"}],"output":{"name":"product"}}],[11,"default","","",31,{"inputs":[{"name":"rootsummary"}],"output":{"name":"rootsummary"}}],[11,"fmt","","",31,{"inputs":[{"name":"rootsummary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"rootsummary"},{"name":"rootsummary"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"rootsummary"},{"name":"rootsummary"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"rootsummary"},{"name":"rootsummary"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"rootsummary"},{"name":"rootsummary"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"rootsummary"},{"name":"rootsummary"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"rootsummary"},{"name":"rootsummary"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"rootsummary"},{"name":"rootsummary"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"rootsummary"}],"output":{"name":"rootsummary"}}],[11,"results_in","","",31,{"inputs":[{"name":"rootsummary"},{"name":"roottimestamp"}],"output":{"name":"roottimestamp"}}],[11,"followed_by","","",31,{"inputs":[{"name":"rootsummary"},{"name":"rootsummary"}],"output":{"name":"rootsummary"}}],[0,"operate","timely::progress","Methods which describe an operators topology, and the progress it makes.",null,null],[8,"Operate","timely::progress::operate","Methods for describing an operators topology, and the progress it makes.",null,null],[10,"inputs","","The number of inputs.",32,{"inputs":[{"name":"operate"}],"output":{"name":"usize"}}],[10,"outputs","","The number of outputs.",32,{"inputs":[{"name":"operate"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","Returns (in -> out) summaries using only edges internal to the vertex, and initial capabilities.\nby default, full connectivity from all inputs to all outputs, and no capabilities reserved.",32,null],[11,"set_external_summary","","Reports (out -> in) summaries for the vertex, and initial frontier information.",32,null],[11,"push_external_progress","","Reports changes to the projection of external work onto each of the scope's inputs.\nCallee is expected to consume the contents of _external to indicate acknowledgement.",32,null],[10,"pull_internal_progress","","Requests changes to the projection of internal work onto each of the scope's outputs, and\n         changes to the number of messages consumed by each of the scope's inputs, and\n         changes to the number of messages producen on each of the scope's outputs.\nReturns a bool indicating if there is any un-reported work remaining (e.g. work that doesn't project on an output).",32,null],[10,"name","","",32,{"inputs":[{"name":"operate"}],"output":{"name":"str"}}],[11,"notify_me","","",32,{"inputs":[{"name":"operate"}],"output":{"name":"bool"}}],[11,"inputs","alloc::rc","",33,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"outputs","","",33,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","",33,null],[11,"set_external_summary","","",33,null],[11,"push_external_progress","","",33,null],[11,"pull_internal_progress","","",33,null],[11,"name","","",33,{"inputs":[{"name":"rc"}],"output":{"name":"str"}}],[11,"notify_me","","",33,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[0,"broadcast","timely::progress","Broadcasts progress information among workers.",null,null],[3,"Progcaster","timely::progress::broadcast","Manages broadcasting of progress updates to and receiving updates from workers.",null,null],[6,"ProgressVec","","A list of progress updates corresponding to ((child_scope, [in/out]_port, timestamp), delta)",null,null],[11,"new","","Creates a new `Progcaster` using a channel from the supplied allocator.",34,{"inputs":[{"name":"progcaster"},{"name":"a"}],"output":{"name":"progcaster"}}],[11,"send_and_recv","","Sends and receives progress updates, broadcasting the contents of `messages` and `internal`,\nand updating each with updates from other workers.",34,null],[0,"notificator","timely::progress","A Notificator manages outstanding capabilities on several inputs as well as notification\nrequests that may be blocked by them.",null,null],[3,"Notificator","timely::progress::notificator","Tracks requests for notification and delivers available notifications.",null,null],[11,"default","","",35,{"inputs":[{"name":"notificator"}],"output":{"name":"notificator"}}],[11,"update_frontier_from_cm","","Updates the `Notificator`'s frontiers from a `CountMap` per input.",35,null],[11,"frontier","","Reveals the elements in the frontier of the indicated input.",35,null],[11,"notify_at","","Requests a notification at `time`.",35,{"inputs":[{"name":"notificator"},{"name":"t"}],"output":null}],[11,"pull_progress","","Retrieves progress updates from the `Notificator`.",35,{"inputs":[{"name":"notificator"},{"name":"countmap"}],"output":null}],[11,"next","","",35,{"inputs":[{"name":"notificator"}],"output":{"name":"option"}}],[0,"dataflow","timely","Abstractions for timely dataflow programming.",null,null],[0,"operators","timely::dataflow","Extension traits for `Stream` implementing various operators.",null,null],[0,"enterleave","timely::dataflow::operators","",null,null],[3,"IngressNub","timely::dataflow::operators::enterleave","",null,null],[3,"EgressNub","","",null,null],[8,"Enter","","",null,null],[10,"enter","","",36,{"inputs":[{"name":"enter"},{"name":"stream"}],"output":{"name":"stream"}}],[8,"EnterAt","","",null,null],[10,"enter_at","","",37,{"inputs":[{"name":"enterat"},{"name":"stream"},{"name":"f"}],"output":{"name":"stream"}}],[8,"Leave","","",null,null],[10,"leave","","",38,{"inputs":[{"name":"leave"}],"output":{"name":"stream"}}],[11,"push","","",39,{"inputs":[{"name":"ingressnub"},{"name":"option"}],"output":null}],[11,"push","","",40,{"inputs":[{"name":"egressnub"},{"name":"option"}],"output":null}],[0,"unary","timely::dataflow::operators","Methods to construct generic streaming and blocking unary operators.",null,null],[8,"Unary","timely::dataflow::operators::unary","Methods to construct generic streaming and blocking unary operators.",null,null],[10,"unary_stream","","Creates a new dataflow operator that partitions its input stream by a parallelization\nstrategy `pact`, and repeatedly invokes `logic` which can read from the input stream and\nwrite to the output stream.",41,{"inputs":[{"name":"unary"},{"name":"p"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[10,"unary_notify","","Creates a new dataflow operator that partitions its input stream by a parallelization\nstrategy `pact`, and repeatedly invokes `logic` which can read from the input stream,\nwrite to the output stream, and request and receive notifications. The method also requires\na vector of initial notifications the operator requires (commonly none).",41,{"inputs":[{"name":"unary"},{"name":"p"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[0,"queue","timely::dataflow::operators","",null,null],[8,"Queue","timely::dataflow::operators::queue","",null,null],[10,"queue","","",42,{"inputs":[{"name":"queue"}],"output":{"name":"self"}}],[0,"input","timely::dataflow::operators","",null,null],[3,"Operator","timely::dataflow::operators::input","",null,null],[3,"InputHelper","","Manages the movement of data into the dataflow from the outside world.",null,null],[8,"Input","","",null,null],[10,"new_input","","",43,null],[11,"name","","",44,{"inputs":[{"name":"operator"}],"output":{"name":"str"}}],[11,"inputs","","",44,{"inputs":[{"name":"operator"}],"output":{"name":"usize"}}],[11,"outputs","","",44,{"inputs":[{"name":"operator"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","",44,null],[11,"pull_internal_progress","","",44,null],[11,"notify_me","","",44,{"inputs":[{"name":"operator"}],"output":{"name":"bool"}}],[11,"send","","",45,{"inputs":[{"name":"inputhelper"},{"name":"d"}],"output":null}],[11,"advance_to","","",45,{"inputs":[{"name":"inputhelper"},{"name":"t"}],"output":null}],[11,"close","","",45,{"inputs":[{"name":"inputhelper"}],"output":null}],[11,"epoch","","",45,{"inputs":[{"name":"inputhelper"}],"output":{"name":"t"}}],[11,"drop","","",45,{"inputs":[{"name":"inputhelper"}],"output":null}],[0,"feedback","timely::dataflow::operators","",null,null],[3,"Observer","timely::dataflow::operators::feedback","",null,null],[3,"Helper","","",null,null],[3,"Operator","","",null,null],[8,"LoopVariable","","",null,null],[10,"loop_variable","","",46,null],[8,"ConnectLoop","","",null,null],[10,"connect_loop","","",47,{"inputs":[{"name":"connectloop"},{"name":"helper"}],"output":null}],[11,"push","","",48,{"inputs":[{"name":"observer"},{"name":"option"}],"output":null}],[11,"name","","",49,{"inputs":[{"name":"operator"}],"output":{"name":"str"}}],[11,"inputs","","",49,{"inputs":[{"name":"operator"}],"output":{"name":"usize"}}],[11,"outputs","","",49,{"inputs":[{"name":"operator"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","",49,null],[11,"pull_internal_progress","","",49,null],[11,"notify_me","","",49,{"inputs":[{"name":"operator"}],"output":{"name":"bool"}}],[0,"concat","timely::dataflow::operators","",null,null],[8,"Concat","timely::dataflow::operators::concat","",null,null],[10,"concat","","",50,{"inputs":[{"name":"concat"},{"name":"stream"}],"output":{"name":"stream"}}],[8,"Concatenate","","",null,null],[10,"concatenate","","",51,{"inputs":[{"name":"concatenate"},{"name":"vec"}],"output":{"name":"stream"}}],[0,"partition","timely::dataflow::operators","",null,null],[3,"Operator","timely::dataflow::operators::partition","",null,null],[8,"Partition","","",null,null],[10,"partition","","",52,{"inputs":[{"name":"partition"},{"name":"u64"},{"name":"f"}],"output":{"name":"vec"}}],[11,"new","","",53,{"inputs":[{"name":"operator"},{"name":"pullcounter"},{"name":"vec"},{"name":"f"}],"output":{"name":"operator"}}],[11,"name","","",53,{"inputs":[{"name":"operator"}],"output":{"name":"str"}}],[11,"inputs","","",53,{"inputs":[{"name":"operator"}],"output":{"name":"usize"}}],[11,"outputs","","",53,{"inputs":[{"name":"operator"}],"output":{"name":"usize"}}],[11,"pull_internal_progress","","",53,null],[11,"notify_me","","",53,{"inputs":[{"name":"operator"}],"output":{"name":"bool"}}],[0,"map","timely::dataflow::operators","Extension methods for `Stream` based on record-by-record transformation.",null,null],[8,"Map","timely::dataflow::operators::map","Extension trait for `Stream`.",null,null],[10,"map","","Consumes each element of the stream and yields a new element.",54,{"inputs":[{"name":"map"},{"name":"l"}],"output":{"name":"stream"}}],[10,"map_in_place","","Updates each element of the stream and yields the element.",54,{"inputs":[{"name":"map"},{"name":"l"}],"output":{"name":"stream"}}],[10,"flat_map","","Consumes each element of the stream and yields some number of new elements.",54,{"inputs":[{"name":"map"},{"name":"l"}],"output":{"name":"stream"}}],[10,"filter_map2","","",54,{"inputs":[{"name":"map"},{"name":"l"}],"output":{"name":"stream"}}],[0,"inspect","timely::dataflow::operators","Extension trait and implementation for observing and action on streamed data.",null,null],[8,"Inspect","timely::dataflow::operators::inspect","Methods to inspect records and batches of records on a stream.",null,null],[10,"inspect","","Creates a dataflow operator that calls the supplied function on each record.",55,{"inputs":[{"name":"inspect"},{"name":"f"}],"output":{"name":"self"}}],[10,"inspect_batch","","Creates a dataflow operator that calls the supplied function on each timestamp and batch of records.",55,{"inputs":[{"name":"inspect"},{"name":"f"}],"output":{"name":"self"}}],[0,"filter","timely::dataflow::operators","",null,null],[8,"FilterExt","timely::dataflow::operators::filter","",null,null],[10,"filter","","",56,{"inputs":[{"name":"filterext"},{"name":"l"}],"output":{"name":"self"}}],[0,"binary","timely::dataflow::operators","",null,null],[8,"Binary","timely::dataflow::operators::binary","",null,null],[10,"binary_stream","","",57,{"inputs":[{"name":"binary"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[10,"binary_notify","","",57,{"inputs":[{"name":"binary"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[0,"delay","timely::dataflow::operators","",null,null],[8,"Delay","timely::dataflow::operators::delay","",null,null],[10,"delay","","",58,{"inputs":[{"name":"delay"},{"name":"f"}],"output":{"name":"self"}}],[10,"delay_batch","","",58,{"inputs":[{"name":"delay"},{"name":"f"}],"output":{"name":"self"}}],[0,"exchange","timely::dataflow::operators","",null,null],[8,"Exchange","timely::dataflow::operators::exchange","",null,null],[10,"exchange","","",59,{"inputs":[{"name":"exchange"},{"name":"f"}],"output":{"name":"self"}}],[0,"probe","timely::dataflow::operators","An extension method to monitor progress at a `Stream`.",null,null],[3,"Handle","timely::dataflow::operators::probe","Reports information about progress at the probe.",null,null],[8,"Probe","","Monitors progress at a `Stream`.",null,null],[10,"probe","","Constructs a progress probe which indicates which timestamps have elapsed at the operator.",60,null],[11,"lt","","returns true iff the frontier is strictly less than `time`.",61,{"inputs":[{"name":"handle"},{"name":"t"}],"output":{"name":"bool"}}],[11,"le","","returns true iff the frontier is less than or equal to `time`.",61,{"inputs":[{"name":"handle"},{"name":"t"}],"output":{"name":"bool"}}],[11,"done","","returns true iff the frontier is empty.",61,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[0,"channels","timely::dataflow","Structured communication between timely dataflow operators.",null,null],[0,"pushers","timely::dataflow::channels","",null,null],[0,"tee","timely::dataflow::channels::pushers","",null,null],[3,"Tee","timely::dataflow::channels::pushers::tee","",null,null],[3,"TeeHelper","","",null,null],[11,"push","","",62,{"inputs":[{"name":"tee"},{"name":"option"}],"output":null}],[11,"new","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"tee"}],"output":{"name":"tee"}}],[11,"add_pusher","","",63,{"inputs":[{"name":"teehelper"},{"name":"p"}],"output":null}],[11,"clone","","",63,{"inputs":[{"name":"teehelper"}],"output":{"name":"teehelper"}}],[0,"exchange","timely::dataflow::channels::pushers","",null,null],[3,"Exchange","timely::dataflow::channels::pushers::exchange","",null,null],[11,"new","","",64,{"inputs":[{"name":"exchange"},{"name":"vec"},{"name":"h"}],"output":{"name":"exchange"}}],[11,"push","","",64,{"inputs":[{"name":"exchange"},{"name":"option"}],"output":null}],[0,"counter","timely::dataflow::channels::pushers","",null,null],[3,"Counter","timely::dataflow::channels::pushers::counter","",null,null],[11,"push","","",65,{"inputs":[{"name":"counter"},{"name":"option"}],"output":null}],[11,"new","","",65,{"inputs":[{"name":"counter"},{"name":"p"},{"name":"rc"}],"output":{"name":"counter"}}],[11,"pull_progress","","",65,{"inputs":[{"name":"counter"},{"name":"countmap"}],"output":null}],[0,"buffer","timely::dataflow::channels::pushers","",null,null],[3,"Buffer","timely::dataflow::channels::pushers::buffer","",null,null],[3,"Session","","",null,null],[11,"new","","",66,{"inputs":[{"name":"buffer"},{"name":"p"}],"output":{"name":"buffer"}}],[11,"session","","Returns a Session, which accepts data to send at the associated time",66,{"inputs":[{"name":"buffer"},{"name":"t"}],"output":{"name":"session"}}],[11,"inner","","",66,{"inputs":[{"name":"buffer"}],"output":{"name":"p"}}],[11,"cease","","",66,{"inputs":[{"name":"buffer"}],"output":null}],[11,"give","","",67,{"inputs":[{"name":"session"},{"name":"d"}],"output":null}],[11,"give_iterator","","",67,{"inputs":[{"name":"session"},{"name":"i"}],"output":null}],[11,"give_content","","",67,{"inputs":[{"name":"session"},{"name":"content"}],"output":null}],[0,"pullers","timely::dataflow::channels","",null,null],[0,"counter","timely::dataflow::channels::pullers","",null,null],[3,"Counter","timely::dataflow::channels::pullers::counter","",null,null],[11,"next","","",68,{"inputs":[{"name":"counter"}],"output":{"name":"option"}}],[11,"new","","",68,{"inputs":[{"name":"counter"},{"name":"box"}],"output":{"name":"counter"}}],[11,"pull_progress","","",68,{"inputs":[{"name":"counter"},{"name":"countmap"}],"output":null}],[0,"message","timely::dataflow::channels","Core type for communicating a collection of `D: Data` records.",null,null],[3,"Message","timely::dataflow::channels::message","",null,null],[12,"time","","",69,null],[12,"data","","",69,null],[4,"Content","","",null,null],[13,"Bytes","","",70,null],[13,"Typed","","",70,null],[11,"clone","","",69,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[11,"into_bytes","","",69,{"inputs":[{"name":"message"},{"name":"vec"}],"output":null}],[11,"from_bytes","","",69,{"inputs":[{"name":"message"},{"name":"vec"}],"output":{"name":"self"}}],[11,"clone","","",70,{"inputs":[{"name":"content"}],"output":{"name":"content"}}],[11,"default_length","","Default number of elements in a typed allocated message. This could vary as a function of\n`std::mem::size_of::<D>()`, so is left as a method rather than a constant.",70,{"inputs":[{"name":"content"}],"output":{"name":"usize"}}],[11,"len","","The length of the underlying typed vector.",70,{"inputs":[{"name":"content"}],"output":{"name":"usize"}}],[11,"from_typed","","Constructs a `Message` from typed data, replacing its argument with `Vec::new()`.",70,{"inputs":[{"name":"content"},{"name":"vec"}],"output":{"name":"content"}}],[11,"into_typed","","Returns the typed vector, cleared, or a Vec::new() if the data are binary (and drops them\non the floor, I guess! Ouch.\nALLOC : dropping of binary data. likely called only by persons who pushed typed data on,\nALLOC : so perhaps not all that common. Could put a panic! here just for fun! :D\nALLOC : casual dropping of contents of `data`, which might have allocated memory.",70,{"inputs":[{"name":"content"}],"output":{"name":"vec"}}],[11,"push_at","","",70,{"inputs":[{"name":"content"},{"name":"vec"},{"name":"t"},{"name":"p"}],"output":null}],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",15,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",15,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",15,null],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",15,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",15,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to avoid\nfrequent reallocations.",15,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",15,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",15,null],[11,"into_boxed_slice","","Converts the vector into Box<[T]>.",15,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector, dropping excess elements.",15,null],[11,"as_slice","","Extracts a slice containing the entire vector.",15,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",15,null],[11,"set_len","","Sets the length of a vector.",15,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",15,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",15,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",15,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",15,null],[11,"push","","Appends an element to the back of a collection.",15,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",15,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",15,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",15,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",15,null],[11,"len","","Returns the number of elements in the vector.",15,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",15,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",15,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"split_off","","Splits the collection into two at the given index.",15,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",15,null],[11,"push_all","","Appends all elements in a slice to the `Vec`.",15,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",15,null],[11,"clone","collections::binary_heap","",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"default","","",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",71,{"inputs":[{"name":"binaryheap"},{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",71,{"inputs":[{"name":"binaryheap"},{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",71,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",71,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",71,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",71,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",71,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",71,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",71,null],[11,"drop","","",72,null],[11,"clone","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from_iter","","",71,{"inputs":[{"name":"binaryheap"},{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",71,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",71,null],[11,"extend","","",71,null],[11,"index","collections::bit","",76,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"new","","Creates an empty `BitVec`.",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",76,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"bool"}],"output":{"name":"bitvec"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",76,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",76,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",76,{"inputs":[{"name":"bitvec"},{"name":"usize"},{"name":"f"}],"output":{"name":"bitvec"}}],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",76,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"set","","Sets the value of a bit at an index `i`.",76,null],[11,"set_all","","Sets all bits to 1.",76,null],[11,"negate","","Flips all bits.",76,null],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",76,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",76,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"difference","","Calculates the difference between two bitvectors.",76,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"all","","Returns `true` if all bits are 1.",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the elements of the vector in order.",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"iter"}}],[11,"append","","Moves all bits from `other` into `Self`, leaving `other` empty.",76,null],[11,"split_off","","Splits the `BitVec` into two at the given bit,\nretaining the first half in-place and returning the second one.",76,{"inputs":[{"name":"bitvec"},{"name":"usize"}],"output":{"name":"bitvec"}}],[11,"none","","Returns `true` if all bits are 0.",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"any","","Returns `true` if any bit is 1.",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"vec"}}],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",76,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",76,null],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",76,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",76,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",76,null],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"option"}}],[11,"push","","Pushes a `bool` onto the end.",76,null],[11,"len","","Returns the total number of bits in this vector",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if there are no bits in this vector",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this vector.",76,null],[11,"default","","",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"from_iter","","",76,{"inputs":[{"name":"bitvec"},{"name":"i"}],"output":{"name":"bitvec"}}],[11,"extend","","",76,null],[11,"extend","","",76,null],[11,"clone","","",76,{"inputs":[{"name":"bitvec"}],"output":{"name":"bitvec"}}],[11,"clone_from","","",76,null],[11,"partial_cmp","","",76,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"option"}}],[11,"cmp","","",76,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"ordering"}}],[11,"fmt","","",76,{"inputs":[{"name":"bitvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"eq","","",76,{"inputs":[{"name":"bitvec"},{"name":"bitvec"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",77,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",77,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"default","","",78,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"from_iter","","",78,{"inputs":[{"name":"bitset"},{"name":"i"}],"output":{"name":"bitset"}}],[11,"extend","","",78,null],[11,"extend","","",78,null],[11,"partial_cmp","","",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"option"}}],[11,"cmp","","",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"ordering"}}],[11,"eq","","",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `BitSet`.",78,{"inputs":[{"name":"bitset"}],"output":{"name":"bitset"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",78,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",78,{"inputs":[{"name":"bitset"},{"name":"bitvec"}],"output":{"name":"bitset"}}],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",78,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct\nelements. In the case of `BitSet` this means reallocations will not\noccur as long as all inserted elements are less than `len`.",78,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len`\ndistinct elements.  In the case of `BitSet` this means reallocations\nwill not occur as long as all inserted elements are less than `len`.",78,null],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",78,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"get_ref","","Returns a reference to the underlying bit vector.",78,{"inputs":[{"name":"bitset"}],"output":{"name":"bitvec"}}],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",78,null],[11,"iter","","Iterator over each usize stored in the `BitSet`.",78,{"inputs":[{"name":"bitset"}],"output":{"name":"setiter"}}],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"union"}}],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place\nversion.",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"intersection"}}],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place\nversion.",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self`\nand `other`.  See\n[symmetric_difference_with](#method.symmetric_difference_with) for an\nefficient in-place version.",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"symmetricdifference"}}],[11,"union_with","","Unions in-place with the specified other bit vector.",78,null],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",78,null],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",78,null],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",78,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",78,null],[11,"split_off","","Splits the `BitSet` into two at the given key including the key.\nRetains the first part in-place while returning the second part.",78,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bitset"}}],[11,"len","","Returns the number of set bits in this set.",78,{"inputs":[{"name":"bitset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether there are no bits set in this set",78,{"inputs":[{"name":"bitset"}],"output":{"name":"bool"}}],[11,"clear","","Clears all bits in this set",78,null],[11,"contains","","Returns `true` if this set contains the specified integer.",78,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",78,{"inputs":[{"name":"bitset"},{"name":"bitset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",78,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",78,{"inputs":[{"name":"bitset"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"bitset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"clone","","",79,{"inputs":[{"name":"blockiter"}],"output":{"name":"blockiter"}}],[11,"clone","","",80,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"twobitpositions"}}],[11,"clone","","",81,{"inputs":[{"name":"setiter"}],"output":{"name":"setiter"}}],[11,"clone","","",82,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"clone","","",83,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"clone","","",84,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"clone","","",85,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",79,{"inputs":[{"name":"blockiter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next","","",80,{"inputs":[{"name":"twobitpositions"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next","","",81,{"inputs":[{"name":"setiter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next","","",82,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next","","",83,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next","","",84,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next","","",85,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next","collections::btree::node","",86,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"rawitems"}],"output":{"name":"option"}}],[11,"drop","","",86,null],[11,"drop","","",87,null],[11,"as_slices","","",87,null],[11,"as_slices_mut","","",87,null],[11,"as_slices_internal","","",87,{"inputs":[{"name":"node"}],"output":{"name":"nodeslice"}}],[11,"as_slices_internal_mut","","",87,{"inputs":[{"name":"node"}],"output":{"name":"mutnodeslice"}}],[11,"keys","","",87,null],[11,"keys_mut","","",87,null],[11,"vals","","",87,null],[11,"vals_mut","","",87,null],[11,"edges","","",87,null],[11,"edges_mut","","",87,null],[11,"clone","","",87,{"inputs":[{"name":"node"}],"output":{"name":"node"}}],[11,"clone","","",88,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",87,{"inputs":[{"name":"node"},{"name":"noderef"},{"name":"q"}],"output":{"name":"searchresult"}}],[11,"make_leaf_root","","Make a leaf root from scratch",87,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"node"}}],[11,"make_internal_root","","Make an internal root and swap it with an old root",87,null],[11,"len","","How many key-value pairs the node contains",87,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_empty","","Does the node not contain any key-value pairs",87,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"capacity","","How many key-value pairs the node can fit",87,{"inputs":[{"name":"node"}],"output":{"name":"usize"}}],[11,"is_leaf","","If the node has any children",87,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_underfull","","if the node has too few elements",87,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"is_full","","if the node cannot fit any more elements",87,{"inputs":[{"name":"node"}],"output":{"name":"bool"}}],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",88,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",88,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",88,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",88,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",88,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",88,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",88,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",88,null],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",88,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",88,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"node"}],"output":{"name":"insertionresult"}}],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",88,null],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",88,null],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",88,null],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",88,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",88,{"inputs":[{"name":"handle"}],"output":{"name":"k"}}],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",88,{"inputs":[{"name":"handle"}],"output":{"name":"v"}}],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",88,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",88,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",88,null],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",87,{"inputs":[{"name":"node"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"iter","","",87,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"iter_mut","","",87,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"into_iter","","",87,{"inputs":[{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",87,null],[11,"clone","","",89,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"elemsandedges"}}],[11,"next_kv","","",89,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv_back","","",89,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge","","",89,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_edge_back","","",89,{"inputs":[{"name":"elemsandedges"}],"output":{"name":"option"}}],[11,"next_kv","","",90,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_kv_back","","",90,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge","","",90,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"next_edge_back","","",90,{"inputs":[{"name":"movetraversalimpl"}],"output":{"name":"option"}}],[11,"drop","","",90,null],[11,"clone","","",91,{"inputs":[{"name":"abstraversal"}],"output":{"name":"abstraversal"}}],[11,"next","","",91,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_back","","",91,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",91,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",91,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",91,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",91,{"inputs":[{"name":"abstraversal"}],"output":{"name":"option"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",92,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",92,{"inputs":[{"name":"nodeslice"},{"name":"k"}],"output":{"name":"nodeslice"}}],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",92,{"inputs":[{"name":"nodeslice"}],"output":{"name":"abstraversal"}}],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",93,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",93,{"inputs":[{"name":"mutnodeslice"},{"name":"k"}],"output":{"name":"mutnodeslice"}}],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",93,{"inputs":[{"name":"mutnodeslice"}],"output":{"name":"abstraversal"}}],[11,"clone","collections::btree::map","",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"clone","","",95,{"inputs":[{"name":"absiter"}],"output":{"name":"absiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"with_b","","Makes a new empty BTreeMap with the given B.",94,{"inputs":[{"name":"btreemap"},{"name":"usize"}],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",94,null],[11,"get","","Returns a reference to the value corresponding to the key.",94,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",94,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",94,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",94,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",94,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"into_iter","","Gets an owning iterator over the entries of the map.",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"deref","collections::btree::map::stack","",96,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"deref_mut","","",96,{"inputs":[{"name":"idref"}],"output":{"name":"t"}}],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",97,{"inputs":[{"name":"partialsearchstack"},{"name":"btreemap"}],"output":{"name":"partialsearchstack"}}],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",97,{"inputs":[{"name":"partialsearchstack"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",98,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"partialsearchstack"}}],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",98,{"inputs":[{"name":"pusher"},{"name":"handle"}],"output":{"name":"searchstack"}}],[11,"peek","","Gets a reference to the value the stack points to.",99,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",99,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",99,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",99,{"inputs":[{"name":"searchstack"}],"output":{"name":"v"}}],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",99,{"inputs":[{"name":"searchstack"},{"name":"k"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","collections::btree::map","",94,{"inputs":[{"name":"btreemap"},{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",94,null],[11,"extend","","",94,null],[11,"hash","","",94,null],[11,"default","","",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"eq","","",94,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",94,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",94,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",94,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"traverse","collections::btree::node","",91,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",91,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"traverse","","",91,{"inputs":[{"name":"abstraversal"},{"name":"node"}],"output":{"name":"abstraversal"}}],[11,"next","collections::btree::map","",95,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"absiter"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",102,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",103,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",104,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",105,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",106,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",107,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",107,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",107,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",108,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",109,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",109,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",109,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",109,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",109,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map.",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",94,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",94,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",94,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",94,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"partial_cmp","collections::btree::set","",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",110,null],[11,"clone","","",110,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",110,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"with_b","","Makes a new BTreeSet with the given B.",110,{"inputs":[{"name":"btreeset"},{"name":"usize"}],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet's contents.",110,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",110,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",110,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",110,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",110,null],[11,"contains","","Returns `true` if the set contains a value.",110,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",110,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",110,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",110,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"from_iter","","",110,{"inputs":[{"name":"btreeset"},{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",110,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",110,null],[11,"extend","","",110,null],[11,"default","","",110,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"fmt","","",110,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",111,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",112,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",113,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",113,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",114,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",115,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",116,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",117,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"borrow","alloc::boxed","",17,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",17,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow","alloc::rc","",33,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","alloc::arc","",118,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",119,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",119,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",119,null],[11,"into_owned","","Extracts the owned data.",119,null],[11,"deref","","",119,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",119,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",119,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",119,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",119,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",119,null],[11,"into_cow","","",119,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",119,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",120,null],[11,"cmp","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",120,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",120,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",120,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",120,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",120,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",120,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",120,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",120,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",120,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",120,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"from_iter","","",120,{"inputs":[{"name":"enumset"},{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",120,null],[11,"extend","","",120,null],[11,"clone","core::fmt::rt::v1","",122,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",123,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",124,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",125,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",126,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","collections::linked_list","",127,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",128,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",129,{"inputs":[{"name":"rawlink"},{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",129,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",130,null],[11,"iter","","Provides a forward iterator.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",130,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",130,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",130,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",130,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"drop","","",130,null],[11,"next","","",127,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",131,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next_back","","",131,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",131,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",131,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",128,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next_back","","",128,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",130,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",130,null],[11,"extend","","",130,null],[11,"eq","","",130,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",130,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",130,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",130,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",130,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"start","core::ops","",132,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",133,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",134,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",134,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","collections::slice","",135,{"inputs":[{"name":"elementswaps"}],"output":{"name":"elementswaps"}}],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",135,{"inputs":[{"name":"elementswaps"},{"name":"usize"}],"output":{"name":"elementswaps"}}],[11,"borrow","collections::vec","",15,null],[11,"borrow_mut","","",15,null],[11,"clone","collections::slice","",136,{"inputs":[{"name":"direction"}],"output":{"name":"direction"}}],[11,"clone","","",137,{"inputs":[{"name":"sizedirection"}],"output":{"name":"sizedirection"}}],[11,"next","","",135,{"inputs":[{"name":"elementswaps"}],"output":{"name":"option"}}],[11,"size_hint","","",135,null],[11,"next","","",138,{"inputs":[{"name":"permutations"}],"output":{"name":"option"}}],[11,"size_hint","","",138,null],[11,"clone","collections::str","",139,{"inputs":[{"name":"decompositiontype"}],"output":{"name":"decompositiontype"}}],[11,"clone","","",140,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",140,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"clone","","",141,{"inputs":[{"name":"recompositionstate"}],"output":{"name":"recompositionstate"}}],[11,"clone","","",142,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",142,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"utf16units"}],"output":{"name":"utf16units"}}],[11,"next","","",143,{"inputs":[{"name":"utf16units"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"borrow","collections::string","",144,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",145,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",146,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",147,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",146,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",146,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",146,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"eq","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"haystack","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",148,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",150,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",150,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",150,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",150,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",150,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",150,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",150,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",150,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",151,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",151,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",151,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",151,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",151,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",151,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",151,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",152,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",152,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",152,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",152,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",152,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",152,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"cmp","collections::string","",144,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",144,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",144,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",144,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",144,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",153,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new string buffer initialized with the empty string.",144,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",144,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"string"}}],[11,"from_str","","Creates a new string buffer from the given string.",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",144,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",144,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",144,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",144,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",144,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",144,{"inputs":[{"name":"string"},{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Returns the underlying byte buffer, encoded as UTF-8.",144,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",144,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Pushes the given string onto this string buffer.",144,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",144,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",144,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",144,null],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",144,null],[11,"push","","Adds the given character to the end of the string.",144,null],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",144,null],[11,"truncate","","Shortens a string to the specified length.",144,null],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",144,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",144,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into the string buffer at byte position `idx`.",144,null],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",144,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the number of bytes in this string.",144,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the string contains no bytes",144,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates the string, returning it to 0 length.",144,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars from start to end. The element range is\nremoved even if the iterator is not consumed until the end.",144,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_bytes","","Consumes this error, returning the bytes that were attempted to make a\n`String` with.",153,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",153,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",153,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",144,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",144,{"inputs":[{"name":"string"},{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",144,null],[11,"extend","","",144,null],[11,"extend","","",144,null],[11,"eq","","",144,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",119,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",119,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",144,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",119,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"default","collections::string","",144,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"fmt","","",144,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",144,null],[11,"add","","",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",144,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",144,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",144,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",144,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",144,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref","","",155,{"inputs":[{"name":"derefstring"}],"output":{"name":"string"}}],[11,"eq","","",156,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from_str","","",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_ref","","",144,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",144,null],[11,"from","","",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",119,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",119,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",144,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",144,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",144,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",144,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",157,null],[11,"next","","",157,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"next_back","","",157,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",15,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",15,null],[11,"hash","","",15,null],[11,"index","","",15,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",15,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"index","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"index_mut","","",15,null],[11,"index_mut","","",15,null],[11,"index_mut","","",15,null],[11,"deref","","",15,null],[11,"deref_mut","","",15,null],[11,"from_iter","","",15,{"inputs":[{"name":"vec"},{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",15,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",15,null],[11,"extend","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","collections::borrow","",119,null],[11,"ne","","",119,null],[11,"eq","","",119,null],[11,"ne","","",119,null],[11,"eq","","",119,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",15,null],[11,"default","","",15,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",15,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",15,null],[11,"from","","",15,null],[11,"from","","",15,{"inputs":[{"name":"vec"},{"name":"str"}],"output":{"name":"vec"}}],[11,"from_iter","collections::borrow","",119,{"inputs":[{"name":"cow"},{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",15,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",158,{"inputs":[{"name":"intoiter"}],"output":{"name":"vec"}}],[11,"next","","",158,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",158,null],[11,"count","","",158,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",158,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",158,null],[11,"next","","",159,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[11,"next_back","","",159,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",159,null],[11,"deref","","",160,{"inputs":[{"name":"derefvec"}],"output":{"name":"vec"}}],[11,"drop","","",160,null],[11,"drop","","",161,null],[11,"drop","","",162,null],[11,"clone","collections::vec_deque","",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",163,null],[11,"default","","",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",163,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",163,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",163,null],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",163,null],[11,"truncate","","Shortens a ringbuf, dropping excess elements from the back.",163,null],[11,"iter","","Returns a front-to-back iterator.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",163,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",163,null],[11,"len","","Returns the number of elements in the `VecDeque`.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Creates a draining iterator that clears the `VecDeque` and iterates over\nthe removed items from start to end.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",163,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",163,null],[11,"push_back","","Appends an element to the back of a buffer",163,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it,\nreplacing it with the first element.",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",163,null],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",163,null],[11,"retain","","Retains only the elements specified by the predicate.",163,null],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",163,null],[11,"clone","","",164,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",164,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next_back","","",164,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"indexable","","",164,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"idx","","",164,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",165,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",165,null],[11,"next_back","","",165,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",166,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",166,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",166,null],[11,"next_back","","",166,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",167,null],[11,"next","","",167,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"next_back","","",167,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",163,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",163,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",163,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",163,null],[11,"index","","",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",163,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",163,{"inputs":[{"name":"vecdeque"},{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",163,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",163,null],[11,"extend","","",163,null],[11,"fmt","","",163,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","collections::vec_map","",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone","","",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"clone_from","","",168,null],[11,"hash","","",168,null],[11,"new","","Creates an empty `VecMap`.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",168,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",168,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",168,null],[11,"split_off","","Splits the collection into two at the given key.",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",168,null],[11,"get","","Returns a reference to the value corresponding to the key.",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",168,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",169,{"inputs":[{"name":"entry"}],"output":{"name":"result"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",169,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",169,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",170,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",171,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",171,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",171,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",171,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",171,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"eq","","",168,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",168,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"option"}}],[11,"cmp","","",168,{"inputs":[{"name":"vecmap"},{"name":"vecmap"}],"output":{"name":"ordering"}}],[11,"fmt","","",168,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",168,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",168,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",168,null],[11,"extend","","",168,null],[11,"index","","",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",168,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",172,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",172,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",172,null],[11,"next_back","","",172,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",173,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",173,null],[11,"next_back","","",173,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",174,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",175,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",176,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",176,null],[11,"next_back","","",176,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",174,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",174,null],[11,"next_back","","",174,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",175,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",175,null],[11,"next_back","","",175,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",177,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",177,null],[11,"next_back","","",177,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"eq","collections","",178,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",178,null],[11,"fmt","","",178,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",17,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",17,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",17,null],[11,"default","","",17,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",17,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",17,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",17,null],[11,"eq","","",17,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",17,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",17,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",17,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",17,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",17,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",17,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",17,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",17,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"deref","timely::dataflow::channels::message","",70,{"inputs":[{"name":"content"}],"output":{"name":"vec"}}],[11,"deref_mut","","",70,{"inputs":[{"name":"content"}],"output":{"name":"vec"}}],[0,"pact","timely::dataflow::channels","",null,null],[3,"Pipeline","timely::dataflow::channels::pact","",null,null],[3,"Exchange","","",null,null],[3,"Pusher","","",null,null],[3,"Puller","","",null,null],[8,"ParallelizationContract","","",null,null],[10,"connect","","",179,null],[11,"connect","","",180,null],[11,"new","","",181,{"inputs":[{"name":"exchange"},{"name":"f"}],"output":{"name":"exchange"}}],[11,"connect","","",181,null],[11,"push","","",182,{"inputs":[{"name":"pusher"},{"name":"option"}],"output":null}],[11,"pull","","",183,{"inputs":[{"name":"puller"}],"output":{"name":"option"}}],[0,"scopes","timely::dataflow","Hierarchical organization of timely dataflow graphs.",null,null],[0,"root","timely::dataflow::scopes","",null,null],[3,"Root","timely::dataflow::scopes::root","A `Root` is the entry point to a timely dataflow computation. It wraps a `Allocate`,\nand has a slot for one child `Operate`. The primary intended use of `Root` is through its\nimplementation of the `Scope` trait.",null,null],[11,"new","","",184,{"inputs":[{"name":"root"},{"name":"a"}],"output":{"name":"root"}}],[11,"step","","",184,{"inputs":[{"name":"root"}],"output":{"name":"bool"}}],[11,"index","","",184,{"inputs":[{"name":"root"}],"output":{"name":"usize"}}],[11,"peers","","",184,{"inputs":[{"name":"root"}],"output":{"name":"usize"}}],[11,"name","","",184,{"inputs":[{"name":"root"}],"output":{"name":"string"}}],[11,"add_edge","","",184,{"inputs":[{"name":"root"},{"name":"source"},{"name":"target"}],"output":null}],[11,"add_operator","","",184,{"inputs":[{"name":"root"},{"name":"sc"}],"output":{"name":"usize"}}],[11,"new_subscope","","",184,{"inputs":[{"name":"root"}],"output":{"name":"subgraph"}}],[11,"index","","",184,{"inputs":[{"name":"root"}],"output":{"name":"usize"}}],[11,"peers","","",184,{"inputs":[{"name":"root"}],"output":{"name":"usize"}}],[11,"allocate","","",184,null],[11,"clone","","",184,{"inputs":[{"name":"root"}],"output":{"name":"self"}}],[0,"child","timely::dataflow::scopes","",null,null],[3,"Child","timely::dataflow::scopes::child","A `Child` wraps a `Subgraph` and a parent `G: Scope`. It manages the addition\nof `Operate`s to a subgraph, and the connection of edges between them.",null,null],[12,"subgraph","","",185,null],[12,"parent","","",185,null],[11,"name","","",185,{"inputs":[{"name":"child"}],"output":{"name":"string"}}],[11,"add_edge","","",185,{"inputs":[{"name":"child"},{"name":"source"},{"name":"target"}],"output":null}],[11,"add_operator","","",185,{"inputs":[{"name":"child"},{"name":"sc"}],"output":{"name":"usize"}}],[11,"new_subscope","","",185,{"inputs":[{"name":"child"}],"output":{"name":"subgraph"}}],[11,"index","","",185,{"inputs":[{"name":"child"}],"output":{"name":"usize"}}],[11,"peers","","",185,{"inputs":[{"name":"child"}],"output":{"name":"usize"}}],[11,"allocate","","",185,null],[11,"clone","","",185,{"inputs":[{"name":"child"}],"output":{"name":"self"}}],[8,"Scope","timely::dataflow::scopes","The fundamental operations required to add and connect operators in a timely dataflow graph.",null,null],[16,"Timestamp","","The timestamp associated with data in this scope.",186,null],[10,"name","","A useful name describing the scope.",186,{"inputs":[{"name":"scope"}],"output":{"name":"string"}}],[10,"add_edge","","Connects a source of data with a target of the data. This only links the two for\nthe purposes of tracking progress, rather than effect any data movement itself.",186,{"inputs":[{"name":"scope"},{"name":"source"},{"name":"target"}],"output":null}],[10,"add_operator","","Adds a child `Operate` to the builder's scope. Returns the new child's index.",186,{"inputs":[{"name":"scope"},{"name":"sc"}],"output":{"name":"usize"}}],[10,"new_subscope","","Creates a new `Subgraph` with timestamp `T`. Used by `scoped`, but unlikely to be\ncommonly useful to end users.",186,{"inputs":[{"name":"scope"}],"output":{"name":"subgraph"}}],[11,"scoped","","Creates a `Subgraph` from a closure acting on a `Child` scope, and returning\nwhatever the closure returns.",186,{"inputs":[{"name":"scope"},{"name":"f"}],"output":{"name":"r"}}],[0,"stream","timely::dataflow","A handle to a typed stream of timely data.",null,null],[3,"Stream","timely::dataflow::stream","Abstraction of a stream of `D: Data` records timestamped with `S::Timestamp`.",null,null],[11,"clone","","",187,{"inputs":[{"name":"stream"}],"output":{"name":"stream"}}],[11,"connect_to","","",187,{"inputs":[{"name":"stream"},{"name":"target"},{"name":"p"}],"output":null}],[11,"new","","",187,{"inputs":[{"name":"stream"},{"name":"source"},{"name":"teehelper"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","",187,{"inputs":[{"name":"stream"}],"output":{"name":"source"}}],[11,"scope","","",187,{"inputs":[{"name":"stream"}],"output":{"name":"s"}}],[0,"drain","timely","Placeholder `Drain` implementation for `Vec<T>` until it lands in stable Rust.",null,null],[3,"Drain","timely::drain","",null,null],[8,"DrainExt","","",null,null],[10,"drain_temp","","",188,{"inputs":[{"name":"drainext"}],"output":{"name":"drain"}}],[11,"drain_temp","collections::vec","",15,{"inputs":[{"name":"vec"}],"output":{"name":"drain"}}],[11,"next","timely::drain","",189,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",189,null],[11,"drop","","",189,{"inputs":[{"name":"drain"}],"output":null}],[0,"execute","timely","Starts a timely dataflow execution from configuration information and per-worker logic.",null,null],[5,"execute","timely::execute","Executes a timely dataflow from a configuration and per-communicator logic.",null,{"inputs":[{"name":"configuration"},{"name":"f"}],"output":null}],[5,"execute_from_args","","Executes a timely dataflow from supplied arguments and per-communicator logic.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":null}],[8,"Data","timely","A composite trait for types usable in timely dataflow.",null,null],[11,"enter","timely::dataflow::scopes::child","",185,{"inputs":[{"name":"child"},{"name":"stream"}],"output":{"name":"stream"}}],[11,"leave","timely::dataflow::stream","",187,{"inputs":[{"name":"stream"}],"output":{"name":"stream"}}],[11,"unary_notify","","",187,{"inputs":[{"name":"stream"},{"name":"p"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[11,"unary_stream","","",187,{"inputs":[{"name":"stream"},{"name":"p"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[11,"queue","","",187,{"inputs":[{"name":"stream"}],"output":{"name":"stream"}}],[11,"new_input","timely::dataflow::scopes::child","",185,null],[11,"connect_loop","timely::dataflow::stream","",187,{"inputs":[{"name":"stream"},{"name":"helper"}],"output":null}],[11,"concat","","",187,{"inputs":[{"name":"stream"},{"name":"stream"}],"output":{"name":"stream"}}],[11,"partition","","",187,{"inputs":[{"name":"stream"},{"name":"u64"},{"name":"f"}],"output":{"name":"vec"}}],[11,"map","","",187,{"inputs":[{"name":"stream"},{"name":"l"}],"output":{"name":"stream"}}],[11,"map_in_place","","",187,{"inputs":[{"name":"stream"},{"name":"l"}],"output":{"name":"stream"}}],[11,"flat_map","","",187,{"inputs":[{"name":"stream"},{"name":"l"}],"output":{"name":"stream"}}],[11,"filter_map2","","",187,{"inputs":[{"name":"stream"},{"name":"l"}],"output":{"name":"stream"}}],[11,"inspect","","",187,{"inputs":[{"name":"stream"},{"name":"f"}],"output":{"name":"stream"}}],[11,"inspect_batch","","",187,{"inputs":[{"name":"stream"},{"name":"f"}],"output":{"name":"stream"}}],[11,"filter","","",187,{"inputs":[{"name":"stream"},{"name":"l"}],"output":{"name":"stream"}}],[11,"binary_stream","","",187,{"inputs":[{"name":"stream"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[11,"binary_notify","","",187,{"inputs":[{"name":"stream"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[11,"delay","","",187,{"inputs":[{"name":"stream"},{"name":"f"}],"output":{"name":"stream"}}],[11,"delay_batch","","",187,{"inputs":[{"name":"stream"},{"name":"f"}],"output":{"name":"stream"}}],[11,"exchange","","",187,{"inputs":[{"name":"stream"},{"name":"f"}],"output":{"name":"stream"}}],[11,"probe","","",187,null]],"paths":[[8,"Push"],[8,"Pull"],[4,"Configuration"],[3,"Thread"],[3,"Pusher"],[3,"Puller"],[3,"Process"],[3,"Pusher"],[3,"Puller"],[3,"Binary"],[3,"Pusher"],[3,"Puller"],[4,"Generic"],[3,"MessageHeader"],[3,"Switchboard"],[3,"Vec"],[3,"Drain"],[3,"Box"],[3,"CountMap"],[3,"Antichain"],[3,"MutableAntichain"],[3,"PointstampCounter"],[3,"ScopeWrapper"],[4,"Summary"],[3,"Product"],[3,"Subgraph"],[4,"Source"],[4,"Target"],[8,"Timestamp"],[8,"PathSummary"],[3,"RootTimestamp"],[3,"RootSummary"],[8,"Operate"],[3,"Rc"],[3,"Progcaster"],[3,"Notificator"],[8,"Enter"],[8,"EnterAt"],[8,"Leave"],[3,"IngressNub"],[3,"EgressNub"],[8,"Unary"],[8,"Queue"],[8,"Input"],[3,"Operator"],[3,"InputHelper"],[8,"LoopVariable"],[8,"ConnectLoop"],[3,"Observer"],[3,"Operator"],[8,"Concat"],[8,"Concatenate"],[8,"Partition"],[3,"Operator"],[8,"Map"],[8,"Inspect"],[8,"FilterExt"],[8,"Binary"],[8,"Delay"],[8,"Exchange"],[8,"Probe"],[3,"Handle"],[3,"Tee"],[3,"TeeHelper"],[3,"Exchange"],[3,"Counter"],[3,"Buffer"],[3,"Session"],[3,"Counter"],[3,"Message"],[4,"Content"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BitVec"],[3,"Iter"],[3,"BitSet"],[3,"BlockIter"],[3,"TwoBitPositions"],[3,"SetIter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"AbsIter"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Arc"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"ElementSwaps"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[3,"String"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"StrSearcher"],[4,"State"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"DerefString"],[3,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"VecMap"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[4,"Bound"],[8,"ParallelizationContract"],[3,"Pipeline"],[3,"Exchange"],[3,"Pusher"],[3,"Puller"],[3,"Root"],[3,"Child"],[8,"Scope"],[3,"Stream"],[8,"DrainExt"],[3,"Drain"]]};
searchIndex['mmap'] = {"items":[[0,"","mmap","",null,null],[3,"MemoryMap","","A memory mapped file or chunk of memory. This is a very system-specific\ninterface to the OS's memory mapping facilities (`mmap` on POSIX,\n`VirtualAlloc`/`CreateFileMapping` on Windows). It makes no attempt at\nabstracting platform differences, besides in error values returned. Consider\nyourself warned.",null,null],[4,"MemoryMapKind","","Type of memory map",null,null],[13,"MapFile","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory.  Corresponds to `VirtualAlloc` on Windows.",0,null],[13,"MapVirtual","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory, or for allocation. Corresponds to `VirtualAlloc` on\nWindows.",0,null],[4,"MapOption","","Options the memory map is created with",null,null],[13,"MapReadable","","The memory should be readable",1,null],[13,"MapWritable","","The memory should be writable",1,null],[13,"MapExecutable","","The memory should be executable",1,null],[13,"MapAddr","","Create a map for a specific address range. Corresponds to `MAP_FIXED` on\nPOSIX.",1,null],[13,"MapFd","","Create a memory mapping for a file with a given fd.",1,null],[13,"MapOffset","","When using `MapFd`, the start of the map is `usize` bytes from the start\nof the file.",1,null],[13,"MapNonStandardFlags","","On POSIX, this can be used to specify the default flags passed to\n`mmap`. By default it uses `MAP_PRIVATE` and, if not using `MapFd`,\n`MAP_ANON`. This will override both of those. This is platform-specific\n(the exact values used) and ignored on Windows.",1,null],[4,"MapError","","Possible errors when creating a map.",null,null],[13,"ErrFdNotAvail","","# The following are POSIX-specific",2,null],[13,"ErrInvalidFd","","fd was not valid",2,null],[13,"ErrUnaligned","","Either the address given by `MapAddr` or offset given by `MapOffset` was\nnot a multiple of `MemoryMap::granularity` (unaligned to page size).",2,null],[13,"ErrNoMapSupport","","With `MapFd`, the fd does not support mapping.",2,null],[13,"ErrNoMem","","If using `MapAddr`, the address + `min_len` was outside of the process's\naddress space. If using `MapFd`, the target of the fd didn't have enough\nresources to fulfill the request.",2,null],[13,"ErrZeroLength","","A zero-length map was requested. This is invalid according to\n[POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html).\nNot all platforms obey this, but this wrapper does.",2,null],[13,"ErrUnknown","","Unrecognized error. The inner value is the unrecognized errno.",2,null],[13,"ErrUnsupProt","","# The following are Windows-specific",2,null],[13,"ErrUnsupOffset","","When using `MapFd`, `MapOffset` was given (Windows does not support this\nat all)",2,null],[13,"ErrAlreadyExists","","When using `MapFd`, there was already a mapping to the file.",2,null],[13,"ErrVirtualAlloc","","Unrecognized error from `VirtualAlloc`. The inner value is the return\nvalue of GetLastError.",2,null],[13,"ErrCreateFileMappingW","","Unrecognized error from `CreateFileMapping`. The inner value is the\nreturn value of `GetLastError`.",2,null],[13,"ErrMapViewOfFile","","Unrecognized error from `MapViewOfFile`. The inner value is the return\nvalue of `GetLastError`.",2,null],[11,"clone","","",0,{"inputs":[{"name":"memorymapkind"}],"output":{"name":"memorymapkind"}}],[11,"clone","","",1,{"inputs":[{"name":"mapoption"}],"output":{"name":"mapoption"}}],[11,"fmt","","",2,{"inputs":[{"name":"maperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"maperror"}],"output":{"name":"maperror"}}],[11,"fmt","","",2,{"inputs":[{"name":"maperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"maperror"}],"output":{"name":"str"}}],[11,"new","","Create a new mapping with the given `options`, at least `min_len` bytes\nlong. `min_len` must be greater than zero; see the note on\n`ErrZeroLength`.",3,null],[11,"granularity","","Granularity that the offset or address must be for `MapOffset` and\n`MapAddr` respectively.",3,{"inputs":[{"name":"memorymap"}],"output":{"name":"usize"}}],[11,"drop","","Unmap the mapping. Panics the task if `munmap` panics.",3,{"inputs":[{"name":"memorymap"}],"output":null}],[11,"data","","Returns the pointer to the memory created or modified by this map.",3,null],[11,"len","","Returns the number of bytes this map applies to.",3,{"inputs":[{"name":"memorymap"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of mapping this represents.",3,{"inputs":[{"name":"memorymap"}],"output":{"name":"memorymapkind"}}]],"paths":[[4,"MemoryMapKind"],[4,"MapOption"],[4,"MapError"],[3,"MemoryMap"]]};
searchIndex['timely_communication'] = {"items":[[0,"","timely_communication","A simple communication infrastructure providing typed exchange channels.",null,null],[0,"allocator","","Types and traits for the allocation of channels between threads, process, and computers.",null,null],[0,"thread","timely_communication::allocator","",null,null],[3,"Thread","timely_communication::allocator::thread","",null,null],[11,"index","","",0,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"peers","","",0,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"allocate","","",0,null],[0,"process","timely_communication::allocator","",null,null],[3,"Process","timely_communication::allocator::process","",null,null],[11,"inner","","",1,{"inputs":[{"name":"process"}],"output":{"name":"thread"}}],[11,"new_vector","","",1,{"inputs":[{"name":"process"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"index","","",1,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[11,"peers","","",1,{"inputs":[{"name":"process"}],"output":{"name":"usize"}}],[11,"allocate","","",1,null],[0,"binary","timely_communication::allocator","",null,null],[3,"Binary","timely_communication::allocator::binary","",null,null],[12,"inner","","",2,null],[12,"index","","",2,null],[12,"peers","","",2,null],[12,"allocated","","",2,null],[12,"readers","","",2,null],[12,"senders","","",2,null],[11,"inner","","",2,{"inputs":[{"name":"binary"}],"output":{"name":"process"}}],[11,"index","","",2,{"inputs":[{"name":"binary"}],"output":{"name":"usize"}}],[11,"peers","","",2,{"inputs":[{"name":"binary"}],"output":{"name":"usize"}}],[11,"allocate","","",2,null],[0,"generic","timely_communication::allocator","A generic allocator, wrapping known implementors of `Allocate`.",null,null],[4,"Generic","timely_communication::allocator::generic","Enumerates known implementors of `Allocate`.\nPasses trait method calls on to members.",null,null],[13,"Thread","","",3,null],[13,"Process","","",3,null],[13,"Binary","","",3,null],[11,"index","","The index of the worker out of `(0..self.peers())`.",3,{"inputs":[{"name":"generic"}],"output":{"name":"usize"}}],[11,"peers","","The number of workers.",3,{"inputs":[{"name":"generic"}],"output":{"name":"usize"}}],[11,"allocate","","Constructs several send endpoints and one receive endpoint.",3,null],[11,"index","","",3,{"inputs":[{"name":"generic"}],"output":{"name":"usize"}}],[11,"peers","","",3,{"inputs":[{"name":"generic"}],"output":{"name":"usize"}}],[11,"allocate","","",3,null],[8,"Allocate","timely_communication::allocator","",null,null],[10,"index","","The index of the worker out of `(0..self.peers())`.",4,{"inputs":[{"name":"allocate"}],"output":{"name":"usize"}}],[10,"peers","","The number of workers.",4,{"inputs":[{"name":"allocate"}],"output":{"name":"usize"}}],[10,"allocate","","Constructs several send endpoints and one receive endpoint.",4,null],[0,"initialize","timely_communication","Initialization logic for a generic instance of the `Allocate` channel allocation trait.",null,null],[4,"Configuration","timely_communication::initialize","",null,null],[13,"Thread","","",5,null],[13,"Process","","",5,null],[13,"Cluster","","",5,null],[5,"initialize","","Initializes an `allocator::Generic` for each thread, spawns the local threads, and invokes the\nsupplied function with the allocator. Returns only once all threads have returned.",null,{"inputs":[{"name":"configuration"},{"name":"f"}],"output":null}],[11,"from_args","","Constructs a new configuration by parsing supplied text arguments.",5,{"inputs":[{"name":"configuration"},{"name":"i"}],"output":{"name":"option"}}],[11,"drain_temp","collections::vec","",6,{"inputs":[{"name":"vec"}],"output":{"name":"drain"}}],[8,"Data","timely_communication","A composite trait for types that may be used with channels.",null,null],[8,"Serialize","","Conversions to and from `Vec<u8>`.",null,null],[10,"into_bytes","","Append the binary representation of `self` to a vector of bytes. The `&mut self` argument\nmay be mutated, but the second argument should only be appended to.",7,{"inputs":[{"name":"serialize"},{"name":"vec"}],"output":null}],[10,"from_bytes","","Recover an instance of Self from its binary representation. The `&mut Vec<u8> argument may\nbe taken with `mem::replace` if it is needed.",7,{"inputs":[{"name":"serialize"},{"name":"vec"}],"output":{"name":"self"}}],[8,"Push","","Pushing elements of type `T`.",null,null],[10,"push","","Pushes `element` with the opportunity to take ownership.",8,{"inputs":[{"name":"push"},{"name":"option"}],"output":null}],[11,"send","","Pushes `element` and drops any resulting resources.",8,{"inputs":[{"name":"push"},{"name":"t"}],"output":null}],[11,"done","","Pushes `None`, conventionally signalling a flush.",8,{"inputs":[{"name":"push"}],"output":null}],[8,"Pull","","Pulling elements of type `T`.",null,null],[10,"pull","","Pulls an element with the opportunity to take ownership.",9,{"inputs":[{"name":"pull"}],"output":{"name":"option"}}],[11,"recv","","Takes an `Option<T>` and leaves `None` behind.",9,{"inputs":[{"name":"pull"}],"output":{"name":"option"}}],[11,"push","alloc::boxed","",10,{"inputs":[{"name":"box"},{"name":"option"}],"output":null}],[11,"pull","","",10,{"inputs":[{"name":"box"}],"output":{"name":"option"}}]],"paths":[[3,"Thread"],[3,"Process"],[3,"Binary"],[4,"Generic"],[8,"Allocate"],[4,"Configuration"],[3,"Vec"],[8,"Serialize"],[8,"Push"],[8,"Pull"],[3,"Box"]]};
searchIndex['tempdir'] = {"items":[[0,"","tempdir","",null,null],[3,"TempDir","","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion.",null,null],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",0,{"inputs":[{"name":"tempdir"},{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",0,{"inputs":[{"name":"tempdir"},{"name":"str"}],"output":{"name":"result"}}],[11,"into_path","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",0,{"inputs":[{"name":"tempdir"}],"output":{"name":"pathbuf"}}],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",0,{"inputs":[{"name":"tempdir"}],"output":{"name":"path"}}],[11,"close","","Close and remove the temporary directory",0,{"inputs":[{"name":"tempdir"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"tempdir"}],"output":null}]],"paths":[[3,"TempDir"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"OsRng","","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",30,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",32,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",32,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",32,null],[11,"rand","","",32,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",33,null],[11,"from_seed","","",33,null],[11,"clone","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",34,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['getopts'] = {"items":[[0,"","getopts","Simple getopt alternative.",null,null],[3,"Options","","A description of the options that a program can handle",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop\nconsidering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the\nexpected format. Use the `Debug` implementation to output detailed\ninformation.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[4,"FailType","","The type of failure that occurred.",null,null],[13,"ArgumentMissing_","","",5,null],[13,"UnrecognizedOption_","","",5,null],[13,"OptionMissing_","","",5,null],[13,"OptionDuplicated_","","",5,null],[13,"UnexpectedArgument_","","",5,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options",6,{"inputs":[{"name":"options"}],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style",6,{"inputs":[{"name":"options"},{"name":"parsingstyle"}],"output":{"name":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not\ntake an argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur\nmultiple times.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",6,{"inputs":[{"name":"options"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",6,{"inputs":[{"name":"options"},{"name":"c"}],"output":{"name":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",6,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage","","Derive a usage message from a set of long options.",6,{"inputs":[{"name":"options"},{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",1,{"inputs":[{"name":"parsingstyle"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsingstyle"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"parsingstyle"}],"output":{"name":"parsingstyle"}}],[11,"eq","","",2,{"inputs":[{"name":"hasarg"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"hasarg"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"hasarg"}],"output":{"name":"hasarg"}}],[11,"eq","","",3,{"inputs":[{"name":"occur"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"occur"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"occur"}],"output":{"name":"occur"}}],[11,"eq","","",0,{"inputs":[{"name":"matches"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"matches"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"eq","","",4,{"inputs":[{"name":"fail"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"fail"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"fail"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"fail"}],"output":{"name":"fail"}}],[11,"eq","","",5,{"inputs":[{"name":"failtype"},{"name":"failtype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"failtype"},{"name":"failtype"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"failtype"}],"output":{"name":"failtype"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"inputs":[{"name":"matches"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"inputs":[{"name":"matches"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given\noption.",0,{"inputs":[{"name":"matches"},{"name":"str"}],"output":{"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"inputs":[{"name":"matches"},{"name":"str"}],"output":{"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or none.",0,{"inputs":[{"name":"matches"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"fail"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"],[3,"Options"]]};
searchIndex['time'] = {"items":[[0,"","time","Simple time handling.",null,null],[3,"Duration","","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",5,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade.",null,null],[3,"LogRecord","","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Trace` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"loglevel"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",8,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from the raw pointer.",8,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",8,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",8,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"default","","",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",8,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",8,null],[11,"eq","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",8,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"fmt","alloc::arc","",9,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Arc<T>`.",10,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"arc"}}],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",10,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"usize"}}],[11,"clone","","Makes a clone of the `Arc<T>`.",10,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"deref","","",10,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",10,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Arc<T>`.",10,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",9,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"clone","","Makes a clone of the `Weak<T>`.",9,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak<T>`.",9,null],[11,"eq","","Equality for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"fmt","","",10,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"hash","","",10,null],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",11,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",11,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share\nthe same inner value.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is\nunique.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",11,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",11,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc<T>`.",11,null],[11,"clone","","Makes a clone of the `Rc<T>`.",11,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",11,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc<T>`s.",11,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",12,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak<T>`.",12,null],[11,"clone","","Makes a clone of the `Weak<T>`.",12,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",12,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"log!","log","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"Box"],[3,"Weak"],[3,"Arc"],[3,"Rc"],[3,"Weak"]]};
searchIndex['abomonation'] = {"items":[[0,"","abomonation","Abomonation (spelling intentional) is a fast serialization / deserialization crate.",null,null],[5,"encode","","Encodes a typed reference into a binary buffer.",null,{"inputs":[{"name":"t"},{"name":"vec"}],"output":null}],[5,"decode","","Decodes a mutable binary slice into an immutable typed reference.",null,null],[5,"verify","","Decodes an immutable binary slice into an immutable typed reference by validating the data .",null,null],[8,"Abomonation","","Abomonation provides methods to serialize any heap data the implementor owns.",null,null],[11,"entomb","","Write any additional information about `&self` beyond its binary representation.",0,{"inputs":[{"name":"abomonation"},{"name":"vec"}],"output":null}],[11,"embalm","","Perform any final edits before committing `&mut self`. Importantly, this method should only\nmanipulate the fields of `self`; any owned memory may not be valid.",0,{"inputs":[{"name":"abomonation"}],"output":null}],[11,"exhume","","Recover any information for `&mut self` not evident from its binary representation.",0,null],[11,"verify","","Confirm that `bytes` decodes to a valid reference without correcting self if it does not.",0,null],[11,"embalm","core::option","",1,{"inputs":[{"name":"option"}],"output":null}],[11,"entomb","","",1,{"inputs":[{"name":"option"},{"name":"vec"}],"output":null}],[11,"exhume","","",1,null],[11,"verify","","",1,null],[11,"embalm","collections::string","",2,{"inputs":[{"name":"string"}],"output":null}],[11,"entomb","","",2,{"inputs":[{"name":"string"},{"name":"vec"}],"output":null}],[11,"exhume","","",2,null],[11,"verify","","",2,null],[11,"embalm","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":null}],[11,"entomb","","",3,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":null}],[11,"exhume","","",3,null],[11,"verify","","",3,null],[11,"embalm","alloc::boxed","",4,{"inputs":[{"name":"box"}],"output":null}],[11,"entomb","","",4,{"inputs":[{"name":"box"},{"name":"vec"}],"output":null}],[11,"exhume","","",4,null],[11,"verify","","",4,null],[14,"unsafe_abomonate!","abomonation","The `unsafe_abomonate!` macro takes a type name with an optional list of fields, and implements\n`Abomonation` for the type, following the pattern of the tuple implementations: each method\ncalls the equivalent method on each of its fields.",null,null]],"paths":[[8,"Abomonation"],[4,"Option"],[3,"String"],[3,"Vec"],[3,"Box"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['advapi32'] = {"items":[],"paths":[]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries",null,null],[0,"types","","",null,null],[0,"common","libc::types","",null,null],[0,"c95","libc::types::common","",null,null],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C.",null,null],[13,"__variant1","","",0,null],[13,"__variant2","","",0,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[0,"c99","libc::types::common","",null,null],[6,"int8_t","libc::types::common::c99","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[0,"posix88","libc::types::common","",null,null],[4,"DIR","libc::types::common::posix88","",null,null],[4,"dirent_t","","",null,null],[0,"os","libc::types","",null,null],[0,"common","libc::types::os","",null,null],[0,"posix01","libc::types::os::common","",null,null],[3,"glob_t","libc::types::os::common::posix01","",null,null],[12,"gl_pathc","","",1,null],[12,"gl_pathv","","",1,null],[12,"gl_offs","","",1,null],[12,"__unused1","","",1,null],[12,"__unused2","","",1,null],[12,"__unused3","","",1,null],[12,"__unused4","","",1,null],[12,"__unused5","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[4,"timezone","","",null,null],[6,"pthread_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sighandler_t","","",null,null],[11,"clone","","",1,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[0,"bsd43","libc::types::os::common","",null,null],[3,"rusage","libc::types::os::common::bsd43","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[0,"bsd44","libc::types::os::common","",null,null],[3,"sockaddr","libc::types::os::common::bsd44","",null,null],[12,"sa_family","","",6,null],[12,"sa_data","","",6,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",7,null],[12,"__ss_align","","",7,null],[12,"__ss_pad2","","",7,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",8,null],[12,"sin_port","","",8,null],[12,"sin_addr","","",8,null],[12,"sin_zero","","",8,null],[3,"in_addr","","",null,null],[12,"s_addr","","",9,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",10,null],[12,"sin6_port","","",10,null],[12,"sin6_flowinfo","","",10,null],[12,"sin6_addr","","",10,null],[12,"sin6_scope_id","","",10,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",11,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",12,null],[12,"imr_interface","","",12,null],[3,"ip6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",13,null],[12,"ipv6mr_interface","","",13,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",14,null],[12,"ai_family","","",14,null],[12,"ai_socktype","","",14,null],[12,"ai_protocol","","",14,null],[12,"ai_addrlen","","",14,null],[12,"ai_addr","","",14,null],[12,"ai_canonname","","",14,null],[12,"ai_next","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",16,null],[12,"ifa_name","","",16,null],[12,"ifa_flags","","",16,null],[12,"ifa_addr","","",16,null],[12,"ifa_netmask","","",16,null],[12,"ifa_ifu","","",16,null],[12,"ifa_data","","",16,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"in_port_t","","",null,null],[6,"in_addr_t","","",null,null],[11,"clone","","",6,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",7,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",8,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",9,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",11,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",12,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",13,{"inputs":[{"name":"ip6_mreq"}],"output":{"name":"ip6_mreq"}}],[11,"clone","","",14,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[0,"arch","libc::types::os","",null,null],[0,"c95","libc::types::os::arch","",null,null],[6,"c_char","libc::types::os::arch::c95","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"wchar_t","","",null,null],[0,"c99","libc::types::os::arch","",null,null],[6,"c_longlong","libc::types::os::arch::c99","",null,null],[6,"c_ulonglong","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[0,"posix88","libc::types::os::arch","",null,null],[6,"off_t","libc::types::os::arch::posix88","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"useconds_t","","",null,null],[6,"mode_t","","",null,null],[6,"ssize_t","","",null,null],[0,"posix01","libc::types::os::arch","",null,null],[3,"stat","libc::types::os::arch::posix01","",null,null],[12,"st_dev","","",17,null],[12,"st_ino","","",17,null],[12,"st_nlink","","",17,null],[12,"st_mode","","",17,null],[12,"st_uid","","",17,null],[12,"st_gid","","",17,null],[12,"__pad0","","",17,null],[12,"st_rdev","","",17,null],[12,"st_size","","",17,null],[12,"st_blksize","","",17,null],[12,"st_blocks","","",17,null],[12,"st_atime","","",17,null],[12,"st_atime_nsec","","",17,null],[12,"st_mtime","","",17,null],[12,"st_mtime_nsec","","",17,null],[12,"st_ctime","","",17,null],[12,"st_ctime_nsec","","",17,null],[12,"__unused","","",17,null],[3,"utimbuf","","",null,null],[12,"actime","","",18,null],[12,"modtime","","",18,null],[3,"pthread_attr_t","","",null,null],[12,"__size","","",19,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"blkcnt_t","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",18,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",19,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[0,"extra","libc::types::os::arch","",null,null],[3,"sockaddr_ll","libc::types::os::arch::extra","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[11,"clone","","",20,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[0,"consts","libc","",null,null],[0,"os","libc::consts","",null,null],[0,"c95","libc::consts::os","",null,null],[17,"EXIT_FAILURE","libc::consts::os::c95","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[0,"posix88","libc::consts::os","",null,null],[17,"O_RDONLY","libc::consts::os::posix88","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EDOTDOT","","",null,null],[17,"EBADMSG","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"ERFKILL","","",null,null],[17,"EHWPOISON","","",null,null],[0,"posix01","libc::consts::os","",null,null],[17,"F_DUPFD","libc::consts::os::posix01","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIG_IGN","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[0,"bsd44","libc::consts::os","",null,null],[17,"MADV_NORMAL","libc::consts::os::bsd44","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[0,"extra","libc::consts::os","",null,null],[17,"AF_PACKET","libc::consts::os::extra","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[0,"sysconf","libc::consts::os","",null,null],[17,"_SC_ARG_MAX","libc::consts::os::sysconf","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[0,"funcs","libc","",null,null],[0,"c95","libc::funcs","",null,null],[0,"ctype","libc::funcs::c95","",null,null],[5,"isalnum","libc::funcs::c95::ctype","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[0,"stdio","libc::funcs::c95","",null,null],[5,"fopen","libc::funcs::c95::stdio","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[0,"stdlib","libc::funcs::c95","",null,null],[5,"abs","libc::funcs::c95::stdlib","",null,null],[5,"labs","","",null,null],[5,"atof","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","Exits the running program in a possibly dangerous manner.",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[0,"string","libc::funcs::c95","",null,null],[5,"strcpy","libc::funcs::c95::string","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[0,"posix88","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix88","",null,null],[5,"chmod","libc::funcs::posix88::stat_","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"mkfifo","","",null,null],[5,"stat","","",null,null],[0,"stdio","libc::funcs::posix88","",null,null],[5,"popen","libc::funcs::posix88::stdio","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[0,"fcntl","libc::funcs::posix88","",null,null],[5,"open","libc::funcs::posix88::fcntl","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[0,"dirent","libc::funcs::posix88","",null,null],[5,"opendir","libc::funcs::posix88::dirent","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[0,"unistd","libc::funcs::posix88","",null,null],[5,"access","libc::funcs::posix88::unistd","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"getsid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"usleep","","",null,null],[5,"nanosleep","","",null,null],[5,"sysconf","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[0,"signal","libc::funcs::posix88","",null,null],[5,"kill","libc::funcs::posix88::signal","",null,null],[0,"mman","libc::funcs::posix88","",null,null],[5,"mlock","libc::funcs::posix88::mman","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mprotect","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,null],[5,"shm_unlink","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[0,"net","libc::funcs::posix88","",null,null],[5,"if_nametoindex","libc::funcs::posix88::net","",null,null],[0,"posix01","libc::funcs","",null,null],[0,"stat_","libc::funcs::posix01","",null,null],[5,"lstat","libc::funcs::posix01::stat_","",null,null],[0,"unistd","libc::funcs::posix01","",null,null],[5,"readlink","libc::funcs::posix01::unistd","",null,null],[5,"fsync","","",null,null],[5,"fdatasync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"putenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[0,"signal","libc::funcs::posix01","",null,null],[5,"signal","libc::funcs::posix01::signal","",null,null],[0,"glob","libc::funcs::posix01","",null,null],[5,"glob","libc::funcs::posix01::glob","",null,null],[5,"globfree","","",null,null],[0,"mman","libc::funcs::posix01","",null,null],[5,"posix_madvise","libc::funcs::posix01::mman","",null,null],[0,"resource","libc::funcs::posix01","",null,null],[5,"getrlimit","libc::funcs::posix01::resource","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[0,"bsd43","libc::funcs","",null,null],[5,"socket","libc::funcs::bsd43","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"recv","","",null,null],[5,"send","","",null,null],[5,"recvfrom","","",null,null],[5,"sendto","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"shutdown","","",null,null],[0,"bsd44","libc::funcs","",null,null],[5,"getdtablesize","libc::funcs::bsd44","",null,null],[5,"ioctl","","",null,null],[5,"madvise","","",null,null],[5,"mincore","","",null,null]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['byteorder'] = {"items":[[0,"","byteorder","This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.",null,null],[4,"Error","","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,{"inputs":[{"name":"readbytesext"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,{"inputs":[{"name":"readbytesext"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,{"inputs":[{"name":"writebytesext"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex['build'] = {"items":[[0,"","build","",null,null],[5,"link","","",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":null}]],"paths":[]};
initSearch(searchIndex);
